{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["actions","addToContact","createAction","deleteContact","filterContact","contactReducer","createReducer","state","payload","filter","id","inputValueReducer","_","combineReducers","contact","inputValue","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","storeExport","persistor","persistStore","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","reset","className","preventDefault","htmlFor","type","pattern","title","required","onChange","Filter","ContactList","contacts","onDeleteContact","map","onClick","connect","dispatch","event","data","newContact","uuidv4","find","toLowerCase","alert","includes","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.fa643e7c.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst addToContact = createAction('contact/Submit');\n\nconst deleteContact = createAction('contact/Delete');\n\nconst filterContact = createAction('contact/inputChange');\n\nconst actions = { addToContact, deleteContact, filterContact };\nexport default actions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './phonebook-actions';\n\nconst contactReducer = createReducer([], {\n  [actions.addToContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst inputValueReducer = createReducer('', {\n  [actions.filterContact]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contact: contactReducer,\n  inputValue: inputValueReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport phonebookReducer from './phonebook/phonebook-reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['inputValue'],\n};\nconst middleware = getDefaultMiddleware =>\n  getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }).concat(logger);\n\nconst store = configureStore({\n  reducer: persistReducer(persistConfig, phonebookReducer),\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nconst storeExport = { store, persistor };\n\nexport default storeExport;\n","import { useState } from 'react';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name: name, number: number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className=\"inner_form\">\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n        <label htmlFor=\"number\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n        <button className=\"btn_form\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nconst Filter = ({ filter, filterContact }) => {\n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={filterContact}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"contact_list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contact_list_item\">\n          <p className=\"contact_name\">\n            {name}: {number}\n          </p>\n          <button className=\"contact_btn\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport actions from './redux/phonebook/phonebook-actions';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nfunction App({\n  contacts,\n  inputValue,\n  addToContact,\n  deleteContact,\n  filterContact,\n}) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   const localState = JSON.parse(localStorage.getItem('Contacts'));\n  //   if (localState) {\n  //     setContacts(localState);\n  //   } else {\n  //     return;\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('Contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts =>\n  //     contacts.filter(contact => contact.id !== contactId),\n  //   );\n  // };\n\n  const submit = data => {\n    const newContact = { ...data, id: uuidv4() };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase(),\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n    } else {\n      addToContact(newContact);\n    }\n  };\n\n  // const filterContact = e => {\n  //   const { value } = e.currentTarget;\n  //   setFilter(value);\n  // };\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(inputValue.toLowerCase()),\n    );\n  };\n\n  return (\n    <div className=\"phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={submit} />\n      <h2>Contacts</h2>\n      <Filter filter={inputValue} filterContact={filterContact} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\nconst mapStateToProps = state => ({\n  contacts: state.contact,\n  inputValue: state.inputValue,\n});\nconst mapDispatchToProps = dispatch => ({\n  addToContact: value => dispatch(actions.addToContact(value)),\n  deleteContact: id => dispatch(actions.deleteContact(id)),\n  filterContact: event =>\n    dispatch(actions.filterContact(event.currentTarget.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}