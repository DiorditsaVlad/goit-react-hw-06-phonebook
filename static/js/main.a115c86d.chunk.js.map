{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","reset","className","preventDefault","htmlFor","type","pattern","title","required","onChange","Filter","filter","filterContact","ContactList","contacts","onDeleteContact","map","id","onClick","App","setContacts","setFilter","useEffect","localState","JSON","parse","localStorage","getItem","setItem","stringify","getContacts","contact","toLowerCase","includes","data","newContact","uuidv4","find","alert","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a115c86d.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name: name, number: number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className=\"inner_form\">\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n        <label htmlFor=\"number\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n        <button className=\"btn_form\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nconst Filter = ({ filter, filterContact }) => {\n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={filterContact}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"contact_list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contact_list_item\">\n          <p className=\"contact_name\">\n            {name}: {number}\n          </p>\n          <button className=\"contact_btn\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const localState = JSON.parse(localStorage.getItem('Contacts'));\n    if (localState) {\n      setContacts(localState);\n    } else {\n      return;\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('Contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const deleteContact = contactId => {\n    setContacts(contacts =>\n      contacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const addToContact = data => {\n    const newContact = { ...data, id: uuidv4() };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase(),\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n    } else {\n      setContacts(contacts => [...contacts, newContact]);\n    }\n  };\n\n  const filterContact = e => {\n    const { value } = e.currentTarget;\n    setFilter(value);\n  };\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const getContacts = getVisibleContacts();\n\n  return (\n    <div className=\"phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addToContact} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} filterContact={filterContact} />\n      <ContactList contacts={getContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}