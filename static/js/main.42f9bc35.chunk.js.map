{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/helpers.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["actions","addToContact","createAction","deleteContact","filterContact","contactReducer","createReducer","state","payload","filter","id","inputValueReducer","_","combineReducers","contact","inputValue","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","storeExport","persistor","persistStore","connect","contacts","dispatch","value","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","reset","className","onSubmit","preventDefault","data","newContact","uuidv4","find","toLowerCase","alert","submit","htmlFor","type","pattern","title","required","onChange","event","getVisibleContacts","includes","map","onClick","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.42f9bc35.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst addToContact = createAction('contact/Submit');\n\nconst deleteContact = createAction('contact/Delete');\n\nconst filterContact = createAction('contact/inputChange');\n\nconst actions = { addToContact, deleteContact, filterContact };\nexport default actions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './phonebook-actions';\n\nconst contactReducer = createReducer([], {\n  [actions.addToContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst inputValueReducer = createReducer('', {\n  [actions.filterContact]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contact: contactReducer,\n  inputValue: inputValueReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport phonebookReducer from './phonebook/phonebook-reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['inputValue'],\n};\nconst middleware = getDefaultMiddleware =>\n  getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }).concat(logger);\n\nconst store = configureStore({\n  reducer: persistReducer(persistConfig, phonebookReducer),\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nconst storeExport = { store, persistor };\n\nexport default storeExport;\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/phonebook/phonebook-actions';\n\nfunction ContactForm({ contacts, addToContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const submit = data => {\n    const newContact = { ...data, id: uuidv4() };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase(),\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n    } else {\n      addToContact(newContact);\n    }\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    submit({ name: name, number: number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className=\"inner_form\">\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n        <label htmlFor=\"number\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n        <button className=\"btn_form\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\nconst mapStateToProps = state => ({\n  contacts: state.contact,\n});\nconst mapDispatchToProps = dispatch => ({\n  addToContact: value => dispatch(actions.addToContact(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/phonebook/phonebook-actions';\nconst Filter = ({ inputValue, filterContact }) => {\n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={filterContact}\n        value={inputValue}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  inputValue: state.inputValue,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filterContact: event =>\n    dispatch(actions.filterContact(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","const getVisibleContacts = (contacts, inputValue) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(inputValue.toLowerCase()),\n  );\n};\nexport default getVisibleContacts;\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport getVisibleContacts from './helpers';\nimport actions from '../../redux/phonebook/phonebook-actions';\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <ul className=\"contact_list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contact_list_item\">\n          <p className=\"contact_name\">\n            {name}: {number}\n          </p>\n          <button className=\"contact_btn\" onClick={() => deleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state.contact, state.inputValue),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nfunction App() {\n  return (\n    <div className=\"phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}